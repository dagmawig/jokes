{"version":3,"sources":["Joke.js","App.js","serviceWorker.js","index.js"],"names":["Joke","props","state","currentJoke","home","category","nsfw","religious","political","racist","sexist","body","getJoke","bind","console","log","$","is","document","getElementById","click","fetch","then","res","json","jokeData","setState","flags","type","id","className","data-toggle","data-target","setup","delivery","joke","Card","CardHeader","this","CardBody","onClick","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"6QAkGeA,E,kDArEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,YAAa,GAAIC,MAAM,EAAMC,SAAU,GAAIC,KAAM,GAAIC,UAAW,GAAIC,UAAW,GAAIC,OAAQ,GAAIC,OAAQ,GAAIC,KAAM,IAErH,EAAKC,QAAU,EAAKA,QAAQC,KAAb,gBALA,E,sDAQR,IAAD,OAENC,QAAQC,IAAIC,IAAE,aAAaC,GAAG,aAG3BD,IAAE,aAAaC,GAAG,aAAeC,SAASC,eAAe,SACxDD,SAASC,eAAe,QAAQC,QAIpCC,MAAM,GAAD,OAtBD,0CAuBCC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAAAG,GACFX,QAAQC,IAAI,OAAQU,GACpB,EAAKC,SAAS,CACVvB,YAAasB,EAAUrB,MAAM,EAAOC,SAAUoB,EAASpB,SACvDC,KAAOmB,EAASE,MAAMrB,KAAS,qCAAkB,qCACjDC,UAAYkB,EAASE,MAAMpB,UAAc,0CAAuB,qCAChEC,UAAYiB,EAASE,MAAMnB,UAAc,0CAAuB,qCAChEC,OAASgB,EAASE,MAAMlB,OAAW,uCAAoB,qCACvDC,OAASe,EAASE,MAAMjB,OAAW,sCAAmB,qCACtDC,KAAyB,YAAlBc,EAASG,KACZ,oCACI,4BAAQC,GAAG,OAAOC,UAAU,kBAAkBF,KAAK,SAASG,cAAY,WAAWC,cAAY,aAAY,2BAAIP,EAASQ,QACxH,yBAAKJ,GAAG,WAAWC,UAAU,YAAYL,EAASS,WAGlD,oCACKT,EAASU,a,+BAS5B,IAAD,OAEL,OACI,oCACI,kBAACC,EAAA,EAAD,KACI,kBAACC,EAAA,EAAD,CAAYP,UAAU,WAChBQ,KAAKpC,MAAME,KAAS,oCAClB,2BAAG,uEACH,2BAAG,yDAA2C,2BAAG,mCAAH,IAAgBkC,KAAKpC,MAAMG,SAAUiC,KAAKpC,MAAMI,KAAMgC,KAAKpC,MAAMK,UAAW+B,KAAKpC,MAAMM,UAAW8B,KAAKpC,MAAMO,OAAQ6B,KAAKpC,MAAMQ,OAAhI,MAEtD,kBAAC6B,EAAA,EAAD,CAAUT,UAAU,qBACdQ,KAAKpC,MAAME,KAAS,4BAAQyB,GAAG,QAAQC,UAAU,kBAAkBF,KAAK,SAASY,QAASF,KAAK1B,SAA3E,iBACjB,oCACI0B,KAAKpC,MAAMS,KACZ,6BAAM,6BACN,4BAAQmB,UAAU,0BAA0BF,KAAK,SAASY,QAAS,WAAK,EAAK5B,YAA7E,gB,GA7Db6B,aCTJC,MAZf,WACE,OACE,yBAAKZ,UAAU,aACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,UCAUa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFhC,SAASC,eAAe,SD0HpB,kBAAmBgC,WACrBA,UAAUC,cAAcC,MACrB/B,MAAK,SAAAgC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL3C,QAAQ2C,MAAMA,EAAMC,a","file":"static/js/main.221ef7c0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport { Card, CardBody, CardHeader } from 'reactstrap'\r\nimport './App.css';\r\nimport $ from 'jquery'\r\n\r\n\r\n//joke data format\r\n// const joke1 = {\r\n//     \"error\": false,\r\n//     \"category\": \"Dark\",\r\n//     \"type\": \"twopart\",\r\n//     \"setup\": \"What did the boy with no arms get for Christmas?\",\r\n//     \"delivery\": \"I don't know, he hasn't opened it yet.\",\r\n//     \"flags\": {\r\n//         \"nsfw\": true,\r\n//         \"religious\": true,\r\n//         \"political\": false,\r\n//         \"racist\": false,\r\n//         \"sexist\": false\r\n//     },\r\n//     \"id\": 146,\r\n//     \"lang\": \"en\"\r\n// }\r\n\r\nconst url = \"https://sv443.net/jokeapi/v2/joke/any\"\r\n\r\n\r\nclass Joke extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            currentJoke: [], home: true, category: '', nsfw: '', religious: '', political: '', racist: '', sexist: '', body: ''\r\n        }\r\n        this.getJoke = this.getJoke.bind(this)\r\n    }\r\n\r\n    getJoke() {\r\n       \r\n        console.log($('.collapse').is(':visible'))\r\n\r\n        // to collapse a joke with a punchline when next button is clicked\r\n        if($('.collapse').is(':visible') && document.getElementById(\"hide\")){\r\n            document.getElementById(\"hide\").click();\r\n        }\r\n\r\n        //fetch random joke using the url\r\n        fetch(`${url}`)\r\n            .then((res) => res.json())\r\n            .then(jokeData => {\r\n                console.log('yeah', jokeData);\r\n                this.setState({\r\n                    currentJoke: jokeData, home: false, category: jokeData.category,\r\n                    nsfw: (jokeData.flags.nsfw) ? (<i> NSFW </i>) : (<></>),\r\n                    religious: (jokeData.flags.religious) ? (<i> religious </i>) : (<></>),\r\n                    political: (jokeData.flags.political) ? (<i> political </i>) : (<></>),\r\n                    racist: (jokeData.flags.racist) ? (<i> racist </i>) : (<></>),\r\n                    sexist: (jokeData.flags.sexist) ? (<i> sexist</i>) : (<></>),\r\n                    body: (jokeData.type === 'twopart') ? (\r\n                        <>\r\n                            <button id=\"hide\" className=\"btn btn-primary\" type=\"button\" data-toggle=\"collapse\" data-target=\"#delivery\"><b>{jokeData.setup}</b></button>\r\n                            <div id=\"delivery\" className=\"collapse\">{jokeData.delivery}</div>\r\n                        </>\r\n                    ) : (\r\n                            <>\r\n                                {jokeData.joke}\r\n                            </>)\r\n                })\r\n            })\r\n\r\n\r\n    }\r\n\r\n  \r\n    render() {\r\n\r\n        return (\r\n            <>\r\n                <Card>\r\n                    <CardHeader className=\"bg-info\">\r\n                        {(this.state.home) ? (<>\r\n                            <p><b>Some of these jokes could be offensive.</b></p>\r\n                            <p><b>Click at your own risk!!</b></p></>) : (<p><b>Tag:</b> {this.state.category}{this.state.nsfw}{this.state.religious}{this.state.political}{this.state.racist}{this.state.sexist} </p>)}\r\n                    </CardHeader>\r\n                    <CardBody className=\"bg-secondary body\">\r\n                        {(this.state.home) ? (<button id=\"start\" className=\"btn btn-primary\" type=\"button\" onClick={this.getJoke}>Generate JOKE</button>) :\r\n                            (<>\r\n                                {this.state.body}\r\n                                <br /><br />\r\n                                <button className=\"btn btn-warning hide-it\" type=\"button\" onClick={()=>{this.getJoke() }}>NEXT</button>\r\n                            </>)}\r\n                    </CardBody>\r\n                </Card>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Joke","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.css'\nimport Joke from './Joke'\n\n\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <div className=\"row row-content\">\n        <div className=\"col-12\">\n          <Joke/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}